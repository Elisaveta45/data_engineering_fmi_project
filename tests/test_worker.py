import unittest
import pandas as pd

from worker import process_data, remove_value_error


class TestProscessData(unittest.TestCase):
    def test_process_data(self):
        data = {
            "from": "2023-01-31T00:00:00+01:00",
            "to": "2023-02-01T00:00:00+01:00",
            "interval": "01:00:00",
            "legend": [
                {
                    "units": "MJ/s",
                    "sortOrder": 0,
                    "key": "BE-EO-CTR-EFF",
                    "title": "CTR",
                    "backgroundColor": "",
                    "borderColor": "",
                    "showOnGraph": "false",
                    "showOnGraphLegend": "false",
                },
                {
                    "units": "MJ/s",
                    "sortOrder": 0,
                    "key": "BIOGAS",
                    "title": "Biogas",
                    "backgroundColor": "",
                    "borderColor": "",
                    "showOnGraph": "false",
                    "showOnGraphLegend": "false",
                },
                {
                    "units": "MJ/s",
                    "sortOrder": 0,
                    "key": "DAP-VEKS-FORBRUG-EFF",
                    "title": "VEKS",
                    "backgroundColor": "",
                    "borderColor": "",
                    "showOnGraph": "false",
                    "showOnGraphLegend": "false",
                },
                {
                    "units": "MJ/s",
                    "sortOrder": 0,
                    "key": "GEOTERM",
                    "title": "Geotermi",
                    "backgroundColor": "",
                    "borderColor": "",
                    "showOnGraph": "false",
                    "showOnGraphLegend": "false",
                },
                {
                    "units": "MJ/s",
                    "sortOrder": 0,
                    "key": "IND_OVS",
                    "title": "Industriel overskudsvarme",
                    "backgroundColor": "",
                    "borderColor": "",
                    "showOnGraph": "false",
                    "showOnGraphLegend": "false",
                },
                {
                    "units": "MJ/s",
                    "sortOrder": 0,
                    "key": "PUMP",
                    "title": "Varmepumper",
                    "backgroundColor": "",
                    "borderColor": "",
                    "showOnGraph": "false",
                    "showOnGraphLegend": "false",
                },
                {
                    "units": "MJ/s",
                    "sortOrder": 0,
                    "key": "SOL",
                    "title": "Solvarme",
                    "backgroundColor": "",
                    "borderColor": "",
                    "showOnGraph": "false",
                },
            ],
            "times": [
                {
                    "timestamp": "2023-01-31T00:00:00+01:00",
                    "values": [
                        {
                            "key": "BE-EO-CTR-EFF",
                            "value": 1107.90208943675,
                            "valueError": 0,
                        },
                        {"key": "BIOGAS", "value": 217.04660161325, "valueError": 0},
                        {
                            "key": "DAP-VEKS-FORBRUG-EFF",
                            "value": 0.000000000,
                            "valueError": 0,
                        },
                        {"key": "GEOTERM", "value": 0.000000000, "valueError": 0},
                        {
                            "key": "IND_OVS",
                            "value": 1324.8311869304166666666666667,
                            "valueError": 0,
                        },
                        {"key": "PUMP", "value": 0.100000002, "valueError": 0},
                        {"key": "SOL", "value": 11.9948533375, "valueError": 0},
                    ],
                },
                {
                    "timestamp": "2023-01-31T01:00:00+01:00",
                    "values": [
                        {
                            "key": "BE-EO-CTR-EFF",
                            "value": 1107.5538228350833333333333333,
                            "valueError": 0,
                        },
                        {
                            "key": "BIOGAS",
                            "value": 215.71519851691666666666666667,
                            "valueError": 0,
                        },
                        {
                            "key": "DAP-VEKS-FORBRUG-EFF",
                            "value": 0.000000000,
                            "valueError": 0,
                        },
                        {"key": "GEOTERM", "value": 0.000000000, "valueError": 0},
                        {"key": "IND_OVS", "value": 1193.58288574225, "valueError": 0},
                        {"key": "PUMP", "value": 0.100000002, "valueError": 0},
                        {
                            "key": "SOL",
                            "value": 11.990981022583333333333333333,
                            "valueError": 0,
                        },
                    ],
                },
                {
                    "timestamp": "2023-01-31T02:00:00+01:00",
                    "values": [
                        {
                            "key": "BE-EO-CTR-EFF",
                            "value": 1098.0534769693333333333333333,
                            "valueError": 0,
                        },
                        {
                            "key": "BIOGAS",
                            "value": 204.83975982658333333333333333,
                            "valueError": 0,
                        },
                        {
                            "key": "DAP-VEKS-FORBRUG-EFF",
                            "value": 0.000000000,
                            "valueError": 0,
                        },
                        {"key": "GEOTERM", "value": 0.000000000, "valueError": 0},
                        {
                            "key": "IND_OVS",
                            "value": 1180.4593505859166666666666667,
                            "valueError": 0,
                        },
                        {"key": "PUMP", "value": 0.100000002, "valueError": 0},
                        {"key": "SOL", "value": 11.99509000775, "valueError": 0},
                    ],
                },
                {
                    "timestamp": "2023-01-31T03:00:00+01:00",
                    "values": [
                        {
                            "key": "BE-EO-CTR-EFF",
                            "value": 1144.1922200521666666666666667,
                            "valueError": 0,
                        },
                        {"key": "BIOGAS", "value": 195.57999547325, "valueError": 0},
                        {
                            "key": "DAP-VEKS-FORBRUG-EFF",
                            "value": 0.000000000,
                            "valueError": 0,
                        },
                        {"key": "GEOTERM", "value": 0.000000000, "valueError": 0},
                        {
                            "key": "IND_OVS",
                            "value": 1157.9074605306666666666666667,
                            "valueError": 0,
                        },
                        {"key": "PUMP", "value": 0.100000002, "valueError": 0},
                        {
                            "key": "SOL",
                            "value": 12.001463095416666666666666667,
                            "valueError": 0,
                        },
                    ],
                },
                {
                    "timestamp": "2023-01-31T04:00:00+01:00",
                    "values": [
                        {
                            "key": "BE-EO-CTR-EFF",
                            "value": 1149.8743693034166666666666667,
                            "valueError": 0,
                        },
                        {
                            "key": "BIOGAS",
                            "value": 199.27853520716666666666666667,
                            "valueError": 0,
                        },
                        {
                            "key": "DAP-VEKS-FORBRUG-EFF",
                            "value": 0.000000000,
                            "valueError": 0,
                        },
                        {"key": "GEOTERM", "value": 0.000000000, "valueError": 0},
                        {"key": "IND_OVS", "value": 1192.67159016925, "valueError": 0},
                        {"key": "PUMP", "value": 0.100000002, "valueError": 0},
                        {"key": "SOL", "value": 11.99962306025, "valueError": 0},
                    ],
                },
                {
                    "timestamp": "2023-01-31T05:00:00+01:00",
                    "values": [
                        {
                            "key": "BE-EO-CTR-EFF",
                            "value": 1173.2625122070833333333333333,
                            "valueError": 0,
                        },
                        {
                            "key": "BIOGAS",
                            "value": 202.38209660833333333333333333,
                            "valueError": 0,
                        },
                        {
                            "key": "DAP-VEKS-FORBRUG-EFF",
                            "value": 0.000000000,
                            "valueError": 0,
                        },
                        {
                            "key": "GEOTERM",
                            "value": 1.6498912573333333333333333333,
                            "valueError": 0,
                        },
                        {
                            "key": "IND_OVS",
                            "value": 1300.5020853678333333333333333,
                            "valueError": 0,
                        },
                        {"key": "PUMP", "value": 0.100000002, "valueError": 0},
                        {"key": "SOL", "value": 11.99717887225, "valueError": 0},
                    ],
                },
                {
                    "timestamp": "2023-01-31T06:00:00+01:00",
                    "values": [
                        {
                            "key": "BE-EO-CTR-EFF",
                            "value": 1229.9141133625,
                            "valueError": 0,
                        },
                        {
                            "key": "BIOGAS",
                            "value": 221.42231750491666666666666667,
                            "valueError": 0,
                        },
                        {
                            "key": "DAP-VEKS-FORBRUG-EFF",
                            "value": 0.000000000,
                            "valueError": 0,
                        },
                        {"key": "GEOTERM", "value": 18.4593180815, "valueError": 0},
                        {
                            "key": "IND_OVS",
                            "value": 1517.2183125815833333333333333,
                            "valueError": 0,
                        },
                        {
                            "key": "PUMP",
                            "value": 2.9888387276666666666666666667,
                            "valueError": 0,
                        },
                        {"key": "SOL", "value": 12.08144942925, "valueError": 0},
                    ],
                },
            ],
        }

        expected_df = pd.DataFrame(
            {
                "key": [
                    "BE-EO-CTR-EFF",
                    "BIOGAS",
                    "DAP-VEKS-FORBRUG-EFF",
                    "GEOTERM",
                    "IND_OVS",
                    "PUMP",
                    "SOL",
                    "BE-EO-CTR-EFF",
                    "BIOGAS",
                    "DAP-VEKS-FORBRUG-EFF",
                    "GEOTERM",
                    "IND_OVS",
                    "PUMP",
                    "SOL",
                    "BE-EO-CTR-EFF",
                    "BIOGAS",
                    "DAP-VEKS-FORBRUG-EFF",
                    "GEOTERM",
                    "IND_OVS",
                    "PUMP",
                    "SOL",
                    "BE-EO-CTR-EFF",
                    "BIOGAS",
                    "DAP-VEKS-FORBRUG-EFF",
                    "GEOTERM",
                    "IND_OVS",
                    "PUMP",
                    "SOL",
                    "BE-EO-CTR-EFF",
                    "BIOGAS",
                    "DAP-VEKS-FORBRUG-EFF",
                    "GEOTERM",
                    "IND_OVS",
                    "PUMP",
                    "SOL",
                    "BE-EO-CTR-EFF",
                    "BIOGAS",
                    "DAP-VEKS-FORBRUG-EFF",
                    "GEOTERM",
                    "IND_OVS",
                    "PUMP",
                    "SOL",
                    "BE-EO-CTR-EFF",
                    "BIOGAS",
                    "DAP-VEKS-FORBRUG-EFF",
                    "GEOTERM",
                    "IND_OVS",
                    "PUMP",
                    "SOL",
                ],
                "value": [
                    1107.90208943675,
                    217.04660161325,
                    0.0,
                    0.0,
                    1324.8311869304166,
                    0.100000002,
                    11.9948533375,
                    1107.5538228350833,
                    215.71519851691667,
                    0.0,
                    0.0,
                    1193.58288574225,
                    0.100000002,
                    11.990981022583334,
                    1098.0534769693334,
                    204.83975982658333,
                    0.0,
                    0.0,
                    1180.4593505859166,
                    0.100000002,
                    11.99509000775,
                    1144.1922200521667,
                    195.57999547325,
                    0.0,
                    0.0,
                    1157.9074605306666,
                    0.100000002,
                    12.001463095416666,
                    1149.8743693034166,
                    199.27853520716667,
                    0.0,
                    0.0,
                    1192.67159016925,
                    0.100000002,
                    11.99962306025,
                    1173.2625122070833,
                    202.38209660833334,
                    0.0,
                    1.6498912573333333,
                    1300.5020853678334,
                    0.100000002,
                    11.99717887225,
                    1229.9141133625,
                    221.42231750491666,
                    0.0,
                    18.4593180815,
                    1517.2183125815834,
                    2.988838727666667,
                    12.08144942925,
                ],
                "date": [
                    pd.Timestamp("2023-01-30 23:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-30 23:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-30 23:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-30 23:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-30 23:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-30 23:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-30 23:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 00:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 00:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 00:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 00:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 00:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 00:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 00:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 01:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 01:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 01:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 01:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 01:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 01:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 01:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 02:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 02:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 02:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 02:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 02:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 02:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 02:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 03:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 03:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 03:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 03:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 03:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 03:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 03:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 04:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 04:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 04:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 04:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 04:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 04:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 04:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 05:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 05:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 05:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 05:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 05:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 05:00:00+0000", tz="UTC"),
                    pd.Timestamp("2023-01-31 05:00:00+0000", tz="UTC"),
                ],
                "title": [
                    "CTR",
                    "Biogas",
                    "VEKS",
                    "Geothermal",
                    "Industrial waste heat",
                    "Heat pumps",
                    "Solar heating",
                    "CTR",
                    "Biogas",
                    "VEKS",
                    "Geothermal",
                    "Industrial waste heat",
                    "Heat pumps",
                    "Solar heating",
                    "CTR",
                    "Biogas",
                    "VEKS",
                    "Geothermal",
                    "Industrial waste heat",
                    "Heat pumps",
                    "Solar heating",
                    "CTR",
                    "Biogas",
                    "VEKS",
                    "Geothermal",
                    "Industrial waste heat",
                    "Heat pumps",
                    "Solar heating",
                    "CTR",
                    "Biogas",
                    "VEKS",
                    "Geothermal",
                    "Industrial waste heat",
                    "Heat pumps",
                    "Solar heating",
                    "CTR",
                    "Biogas",
                    "VEKS",
                    "Geothermal",
                    "Industrial waste heat",
                    "Heat pumps",
                    "Solar heating",
                    "CTR",
                    "Biogas",
                    "VEKS",
                    "Geothermal",
                    "Industrial waste heat",
                    "Heat pumps",
                    "Solar heating",
                ],
                "units": [
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                    "MJ/s",
                ],
            }
        )

        result_df = process_data(data)

        self.assertTrue(expected_df.equals(result_df))

    def test_remove_value_error(self):
        df = pd.DataFrame()
        df["key"] = [
            "BE-EO-CTR-EFF",
            "BE-VL-AFFALD-EF",
            "BE-VL-BIO-EF",
            "BE-VL-EVO-EF",
            "BE-VL-KRAFTV-EF",
            "BE-VL-SPIDS-GAS-EF",
            "BE-VL-SPIDS-OLIE-EF",
            "BE-VL-TOTAL-FAK",
            "BIOGAS",
            "DAP-VEKS-FORBRUG-EFF",
            "GEOTERM",
            "IND_OVS",
            "LOCAL",
            "PUMP",
            "SOL",
            "TOTAL",
            "BE-EO-CTR-EFF",
            "BE-VL-AFFALD-EF",
            "BE-VL-BIO-EF",
            "BE-VL-EVO-EF",
        ]
        df["value"] = [
            1138.0501505534166,
            230.22643534333332,
            0.0,
            19.734650135083335,
            1425.8605346680833,
            12.312466502083334,
            6.003405849333333,
            4.401887774583333,
            3.0,
            411.19787343366664,
            0.0,
            11.0,
            31.0,
            17.0,
            0.0,
            1694.1374924979166,
            1100.819905599,
            210.735903422,
            0.0,
            1.6189741294166666,
        ]
        df["date"] = [
            pd.Timestamp("2023-01-31 23:00:00+0000", tz="UTC"),
            pd.Timestamp("2023-01-31 23:00:00+0000", tz="UTC"),
            pd.Timestamp("2023-01-31 23:00:00+0000", tz="UTC"),
            pd.Timestamp("2023-01-31 23:00:00+0000", tz="UTC"),
            pd.Timestamp("2023-01-31 23:00:00+0000", tz="UTC"),
            pd.Timestamp("2023-01-31 23:00:00+0000", tz="UTC"),
            pd.Timestamp("2023-01-31 23:00:00+0000", tz="UTC"),
            pd.Timestamp("2023-01-31 23:00:00+0000", tz="UTC"),
            pd.Timestamp("2023-01-31 23:00:00+0000", tz="UTC"),
            pd.Timestamp("2023-01-31 23:00:00+0000", tz="UTC"),
            pd.Timestamp("2023-01-31 23:00:00+0000", tz="UTC"),
            pd.Timestamp("2023-01-31 23:00:00+0000", tz="UTC"),
            pd.Timestamp("2023-01-31 23:00:00+0000", tz="UTC"),
            pd.Timestamp("2023-01-31 23:00:00+0000", tz="UTC"),
            pd.Timestamp("2023-01-31 23:00:00+0000", tz="UTC"),
            pd.Timestamp("2023-01-31 23:00:00+0000", tz="UTC"),
            pd.Timestamp("2023-01-30 00:00:00+0000", tz="UTC"),
            pd.Timestamp("2023-01-30 00:00:00+0000", tz="UTC"),
            pd.Timestamp("2023-01-30 00:00:00+0000", tz="UTC"),
            pd.Timestamp("2023-01-30 00:00:00+0000", tz="UTC"),
        ]
        df["title"] = [
            "CTR",
            "Waste energy plant",
            "Peak load wood pellets",
            "Peak load el",
            "Cogeneration plant",
            "Peak load gas",
            "Peak load oil",
            "CO2 - Emission",
            "Biogas",
            "VEKS",
            "Geothermal",
            "Industrial waste heat",
            "Local production",
            "Heat pumps",
            "Solar heating",
            "Total production",
            "CTR",
            "Waste energy plant",
            "Peak load wood pellets",
            "Peak load el",
        ]
        df["units"] = [
            "MJ/s",
            "MJ/s",
            "MJ/s",
            "MJ/s",
            "MJ/s",
            "MJ/s",
            "MJ/s",
            "Kg/GJ",
            "MJ/s",
            "MJ/s",
            "MJ/s",
            "MJ/s",
            "MJ/s",
            "MJ/s",
            "MJ/s",
            "MJ/s",
            "MJ/s",
            "MJ/s",
            "MJ/s",
            "MJ/s",
        ]
        df["valueError"] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

        result = remove_value_error(df)
        self.assertNotIn("valueError", result.columns)
